@page "/update/{Id}"

<div class="row ">
    <h3>Update Todo</h3>
<div class="form-group row mb-4">
    <label for="Title" class="col-sm-2 col-form-label">Title</label>
    <div class="col-sm-10">
            <input type="text" class="form-control" id="Title" placeholder="Title" @bind="newTodo.Title">
    </div>
</div>
    <div class="form-group row mb-4">
    <label for="Description" class="col-sm-2 col-form-label">Description</label>
    <div class="col-sm-10">
            <input type="text" class="form-control" id="Description" placeholder="Description" @bind="newTodo.Description">
    </div>
</div>
    <div class="form-group row mb-4">
    <label for="Date" class="col-sm-2 col-form-label fw-bold">Date</label>
    <div class="col-sm-10">
            <input type="date" class="form-control shadow-none" id="date" @bind="newTodo.CreatedAt">
    </div>
</div>
<div class="form-group row mb-4">
    <div class="col-sm-10">
        <button class="btn btn-primary" @onclick="UpdateTodos">Update Todo</button>
    </div>
</div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public EventCallback<TodoDto> OnTodoUpdate { get; set; }

    private TodoDto newTodo { get; set; }


    [Inject]
     public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(!string.IsNullOrWhiteSpace(Id))
        {
            newTodo = new TodoDto()
            {
                Id = Guid.Parse(Id)
            };

        }
    }

    //method to handle the update
    private async Task UpdateTodos()
    {
        NavigationManager.NavigateTo("/");
        await OnTodoUpdate.InvokeAsync(newTodo);

        //navigate back to the todos page
    }
}
